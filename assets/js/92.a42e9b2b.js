(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{543:function(a,t,s){"use strict";s.r(t);var r=s(2),v=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"能力成熟度模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#能力成熟度模型"}},[a._v("#")]),a._v(" 能力成熟度模型")]),a._v(" "),t("ol",[t("li",[a._v("初始级，杂乱无章，混乱，没有明确步骤，项目靠个人")]),a._v(" "),t("li",[a._v("可重复级，建立了基本的项目管理过程和实践")]),a._v(" "),t("li",[a._v("已定义级，管理和工程都已经标准化，文档化")]),a._v(" "),t("li",[a._v("已管理级，制定了软件过程和产品质量的详细标准")]),a._v(" "),t("li",[a._v("优化级，加强了定量分析")])]),a._v(" "),t("h2",{attrs:{id:"up"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#up"}},[a._v("#")]),a._v(" UP")]),a._v(" "),t("h3",{attrs:{id:"四大阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四大阶段"}},[a._v("#")]),a._v(" 四大阶段")]),a._v(" "),t("ol",[t("li",[a._v("初始")]),a._v(" "),t("li",[a._v("精化")]),a._v(" "),t("li",[a._v("构建")]),a._v(" "),t("li",[a._v("移交")])]),a._v(" "),t("h2",{attrs:{id:"软件过程模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#软件过程模型"}},[a._v("#")]),a._v(" 软件过程模型")]),a._v(" "),t("h3",{attrs:{id:"瀑布模型-sdlc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#瀑布模型-sdlc"}},[a._v("#")]),a._v(" 瀑布模型（SDLC）")]),a._v(" "),t("blockquote",[t("p",[a._v("一步一步执行，像瀑布一样，只适用于需求稳定，明确")])]),a._v(" "),t("h3",{attrs:{id:"v模型-瀑布模型的变体-增加了多轮测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#v模型-瀑布模型的变体-增加了多轮测试"}},[a._v("#")]),a._v(" V模型，瀑布模型的变体，增加了多轮测试")]),a._v(" "),t("h3",{attrs:{id:"演化模型-快速原型开发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#演化模型-快速原型开发"}},[a._v("#")]),a._v(" 演化模型，快速原型开发")]),a._v(" "),t("blockquote",[t("p",[a._v("需求不明确的情况，先弄个基础的版本，再根据客户需求不断迭代")])]),a._v(" "),t("h3",{attrs:{id:"螺旋模型-适合大型项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#螺旋模型-适合大型项目"}},[a._v("#")]),a._v(" 螺旋模型，适合大型项目")]),a._v(" "),t("blockquote",[t("p",[a._v("多个模型的混合，也是原型，但是增加了风险分析")])]),a._v(" "),t("h3",{attrs:{id:"增量模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#增量模型"}},[a._v("#")]),a._v(" 增量模型")]),a._v(" "),t("blockquote",[t("p",[a._v("首先开发核心模块儿，再开发次核心模块儿。与原型模型的区别，每一次增量都可作为独立可操作的产品，原型构造一般是为了演示")])]),a._v(" "),t("h3",{attrs:{id:"喷泉模型-面向对象-迭代性和无间歇性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#喷泉模型-面向对象-迭代性和无间歇性"}},[a._v("#")]),a._v(" 喷泉模型，面向对象，迭代性和无间歇性")]),a._v(" "),t("h3",{attrs:{id:"基于构件的开发模型cbsd-增强了复用性-可靠性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基于构件的开发模型cbsd-增强了复用性-可靠性"}},[a._v("#")]),a._v(" 基于构件的开发模型CBSD，增强了复用性，可靠性")]),a._v(" "),t("h3",{attrs:{id:"形式化方法模型-建立在数学上"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#形式化方法模型-建立在数学上"}},[a._v("#")]),a._v(" 形式化方法模型，建立在数学上")]),a._v(" "),t("h2",{attrs:{id:"软件开发方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#软件开发方法"}},[a._v("#")]),a._v(" 软件开发方法")]),a._v(" "),t("h3",{attrs:{id:"结构化方法-瀑布模型-一旦开发完成-将难以修改-不利于复用及后续版本的开发-被面向对象替代"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结构化方法-瀑布模型-一旦开发完成-将难以修改-不利于复用及后续版本的开发-被面向对象替代"}},[a._v("#")]),a._v(" 结构化方法，瀑布模型，一旦开发完成，将难以修改，不利于复用及后续版本的开发，被面向对象替代")]),a._v(" "),t("h3",{attrs:{id:"jackson方法-面向数据结构的方法-小规模项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jackson方法-面向数据结构的方法-小规模项目"}},[a._v("#")]),a._v(" jackson方法，面向数据结构的方法，小规模项目")]),a._v(" "),t("h3",{attrs:{id:"原型方法-适用于需求不明确"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原型方法-适用于需求不明确"}},[a._v("#")]),a._v(" 原型方法，适用于需求不明确")]),a._v(" "),t("h3",{attrs:{id:"面向对象方法-强调复用性-构建全面合理的模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面向对象方法-强调复用性-构建全面合理的模型"}},[a._v("#")]),a._v(" 面向对象方法，强调复用性，构建全面合理的模型")]),a._v(" "),t("h2",{attrs:{id:"敏捷开发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#敏捷开发"}},[a._v("#")]),a._v(" 敏捷开发")]),a._v(" "),t("h3",{attrs:{id:"针对小型项目-给程序员减负-一切以开发出项目为主"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#针对小型项目-给程序员减负-一切以开发出项目为主"}},[a._v("#")]),a._v(" 针对小型项目，给程序员减负，一切以开发出项目为主")]),a._v(" "),t("ul",[t("li",[t("img",{attrs:{src:"software-engineering_files/1.jpg",alt:"敏捷开发"}})])]),a._v(" "),t("h3",{attrs:{id:"结对编程-一个程序员开发-一个程序观察审查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结对编程-一个程序员开发-一个程序观察审查"}},[a._v("#")]),a._v(" 结对编程，一个程序员开发，一个程序观察审查")]),a._v(" "),t("h3",{attrs:{id:"极限编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#极限编程"}},[a._v("#")]),a._v(" 极限编程")]),a._v(" "),t("h3",{attrs:{id:"并列争球-30天一冲刺"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并列争球-30天一冲刺"}},[a._v("#")]),a._v(" 并列争球，30天一冲刺")]),a._v(" "),t("h2",{attrs:{id:"数据库范式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库范式"}},[a._v("#")]),a._v(" 数据库范式")]),a._v(" "),t("ol",[t("li",[a._v("第一范式（1NF） 在任何一个关系数据库中，第一范式（1NF）是对关系模式的基本要求，不满足第一范式（1NF）的数据库就不是关系数据库。 所谓第一范式（1NF）是指数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。如果出现重复的属性，就可能需要定义一个新的实体，新的实体由重复的属性构成，新实体与原实体之间为一对多关系。在第一范式（1NF）中表的每一行只包含一个实例的信息。")]),a._v(" "),t("li",[a._v("第二范式（2NF） 第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。第二范式（2NF）要求数据库表中的每个实例或行必须可以被惟一地区分。为实现区分通常需要为表加上一个列，以存储各个实例的惟一标识。 第二范式（2NF）要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的惟一标识。简而言之，第二范式就是非主属性非部分依赖于主关键字。")]),a._v(" "),t("li",[a._v("第三范式（3NF） 满足第三范式（3NF）必须先满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。例如，存在一个部门信息表，其中每个部门有部门编号（dept_id）、部门名称、部门简介等信息。那么员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。简而言之，第三范式就是属性不依赖于其它非主属性。【可能存在非主属性决定其它属性】")]),a._v(" "),t("li",[a._v("BC范式，满足第二范式，和第三范式区别：【不能存在非主属性决定其它属性】")]),a._v(" "),t("li",[a._v("第四范式：限制关系模式间不能存在非平凡且非函数依赖的多值依赖，要求把同一表内多对多关系删除")]),a._v(" "),t("li",[a._v("主属性：候选键内属性，其它属性为非主属性，所有属性都是主属性的话，就是第三范式")]),a._v(" "),t("li",[t("img",{attrs:{src:"software-engineering_files/2.jpg",alt:"截图"}})])]),a._v(" "),t("h3",{attrs:{id:"函数依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数依赖"}},[a._v("#")]),a._v(" 函数依赖")]),a._v(" "),t("ul",[t("li",[a._v("部分函数依赖")])]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("A")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("C")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("A")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("B")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("C")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("ul",[t("li",[a._v("传递函数依赖")])]),a._v(" "),t("h3",{attrs:{id:"非规范化会出现以下问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非规范化会出现以下问题"}},[a._v("#")]),a._v(" 非规范化会出现以下问题")]),a._v(" "),t("ul",[t("li",[a._v("数据冗余")]),a._v(" "),t("li",[a._v("插入，更新，删除异常")])]),a._v(" "),t("h3",{attrs:{id:"键和约束"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#键和约束"}},[a._v("#")]),a._v(" 键和约束")]),a._v(" "),t("ul",[t("li",[a._v("超键，唯一标识此表的属性组合")]),a._v(" "),t("li",[a._v("候选键，超键中去除冗余属性")]),a._v(" "),t("li",[a._v("主键，任选一个候选键")]),a._v(" "),t("li",[a._v("外键，其它表中的主键")]),a._v(" "),t("li",[a._v("实体完整性约束，主键约束，主键不能为空")]),a._v(" "),t("li",[a._v("参照完整性约束，外键约束，外键必须是其它表的主键或者为空")])]),a._v(" "),t("h2",{attrs:{id:"随机存储-内容存储"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#随机存储-内容存储"}},[a._v("#")]),a._v(" 随机存储，内容存储")]),a._v(" "),t("ul",[t("li",[a._v("本题考查存储系统的基础知识。")]),a._v(" "),t("li",[a._v("存储系统中的存储器，按访问方式可分为按地址访问的存储器和按内容访问的存储器；按寻址方式分类可分为随机存储器、顺序存储器和直接存储器。随机存储器(Random Access Memory, RAM)指可对任何存储单元存入或读取数据， 访问任何一个存储单元所需的时间是相同的。顺序存储器(Sequentially Addressed Memory, SAM)指访问数据所需要的时间与数据所在的存储位置相关，磁带是典型的顺序存储器。直接存储器(Direct Addressed Memory，DAM)是介于随机存取和顺序存取之间的一种寻址方式。磁盘是一种直接存取存储器，它对磁道的寻址是随机的，而在一个磁道内，则是顺序寻址。相联存储器是一种按内容访问的存储器。其工作原理就是把数据或数据的某一部分作为关键字，将该关键字与存储器中的每一单元进行比较，从而找出存储器中所有与关键字相同的数据字。")])]),a._v(" "),t("h2",{attrs:{id:"必考题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#必考题"}},[a._v("#")]),a._v(" 必考题")]),a._v(" "),t("h3",{attrs:{id:"uml图形"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#uml图形"}},[a._v("#")]),a._v(" UML图形")]),a._v(" "),t("p",[a._v("记住每种符号的含义，泛化之类的")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://blog.csdn.net/qq_35423190/article/details/125069834",target:"_blank",rel:"noopener noreferrer"}},[a._v("UML图详解"),t("OutboundLink")],1)])]),a._v(" "),t("h3",{attrs:{id:"关键路径"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关键路径"}},[a._v("#")]),a._v(" 关键路径")]),a._v(" "),t("h3",{attrs:{id:"设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[a._v("#")]),a._v(" 设计模式")]),a._v(" "),t("p",[a._v("记住设计模式大概的应用场景和特点，最好能看看设计模式的类图")]),a._v(" "),t("h3",{attrs:{id:"pv同步互斥"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pv同步互斥"}},[a._v("#")]),a._v(" PV同步互斥")]),a._v(" "),t("h3",{attrs:{id:"可靠性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可靠性"}},[a._v("#")]),a._v(" 可靠性")]),a._v(" "),t("h3",{attrs:{id:"软件工程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#软件工程"}},[a._v("#")]),a._v(" 软件工程")]),a._v(" "),t("p",[a._v("记住每种模型大致的场景，比如瀑布模型适用于需求明确，螺旋模型适用于大项目")]),a._v(" "),t("h3",{attrs:{id:"流水线-磁盘寻址时间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#流水线-磁盘寻址时间"}},[a._v("#")]),a._v(" 流水线，磁盘寻址时间")]),a._v(" "),t("h3",{attrs:{id:"直接地址-一级地址-二级地址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#直接地址-一级地址-二级地址"}},[a._v("#")]),a._v(" 直接地址，一级地址，二级地址")]),a._v(" "),t("h3",{attrs:{id:"上下文无关表示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#上下文无关表示"}},[a._v("#")]),a._v(" 上下文无关表示")]),a._v(" "),t("ul",[t("li",[a._v("排除没有的符号，比如括号（，除/")]),a._v(" "),t("li",[a._v("有限自动机，明白图的意思")])])])}),[],!1,null,null,null);t.default=v.exports}}]);