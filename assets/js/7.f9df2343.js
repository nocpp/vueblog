(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{432:function(t,a,s){t.exports=s.p+"assets/img/wb.a55d305a.jpg"},433:function(t,a,s){t.exports=s.p+"assets/img/3.fba16924.jpg"},434:function(t,a,s){t.exports=s.p+"assets/img/4.b9bd5217.jpg"},435:function(t,a,s){t.exports=s.p+"assets/img/5.823f6ccc.jpg"},436:function(t,a,s){t.exports=s.p+"assets/img/6.f8d8b199.jpg"},437:function(t,a,s){t.exports=s.p+"assets/img/2.e5d8f39c.jpg"},438:function(t,a,s){t.exports=s.p+"assets/img/7.4d9894da.jpg"},439:function(t,a,s){t.exports=s.p+"assets/img/8.7ba55a08.jpg"},440:function(t,a,s){t.exports=s.p+"assets/img/9.541907ae.jpg"},441:function(t,a,s){t.exports=s.p+"assets/img/10.d605f3b2.jpg"},442:function(t,a,s){t.exports=s.p+"assets/img/13.b282fb32.jpg"},513:function(t,a,s){"use strict";s.r(a);var e=s(2),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"http-的请求方式场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-的请求方式场景"}},[t._v("#")]),t._v(" HTTP 的请求方式场景")]),t._v(" "),a("ul",[a("li",[t._v("GET 方法：获取数据通常(查看数据)-查看")]),t._v(" "),a("li",[t._v("POST 方法：向服务器提交数据通常(创建数据)-create")]),t._v(" "),a("li",[t._v("PUT 方法：向服务器提交数据通常(更新数据)-update，与POST方法很像，也是提交数据，但PUT制定了资源在服务器上的位置，常用在修改数据，PUT是把所有字段传过去")]),t._v(" "),a("li",[t._v("PATCH 方法: 也是更新数据，和Put的区别是只更新传入的字段，也就是更新局部参数，比如更新userInfo的nickname，就只传nickname，而PUT会把整个userInfo传给后端。更节省带宽。")]),t._v(" "),a("li",[t._v("HEAD 方法：只请求页面的首部信息")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("一个HEAD请求的响应可被缓存，HEAD请求常常被忽略，但是能提供很多有用的信息，特别是在有限的速度和带宽下。主要有以下特点:")]),t._v(" "),a("ol",[a("li",[t._v("只请求资源的首部；")]),t._v(" "),a("li",[t._v("检查超链接的有效性；")]),t._v(" "),a("li",[t._v("检查网页是否被修改；")]),t._v(" "),a("li",[t._v("多用于自动搜索机器人获取网页的标志信息，获取rss种子信息，或者传递安全认证信息等")])])]),a("ul",[a("li",[t._v("DELETE 方法：删除服务器上的资源")]),t._v(" "),a("li",[t._v("OPTIONS 方法：用于获取当前URL支持的请求方式,options请求，在响应头里会有个allow字段，值是运行的请求方法")]),t._v(" "),a("li",[t._v("TRACE 方法：用于激活一个远程的应用层请求消息回路")]),t._v(" "),a("li",[t._v("CONNECT 方法：把请求链接转换到透明的TCP/IP的通道（HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。）")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("ol",[a("li",[t._v("方法名称是区分大小写的，当某个请求所针对的资源不支持对应的请求方法的时候，服务器应当返回状态码405（Mothod Not Allowed）；当服务器不认识请求方法时，应返回状态码501（Not Implemented）。")]),t._v(" "),a("li",[t._v("HTTP服务器至少应该实现GET和HEAD/POST方法，其他方法都是可选的，此外除上述方法，特定的HTTP服务器支持扩展自定义的方法。")])])]),a("h2",{attrs:{id:"什么时候浏览器会发起options请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么时候浏览器会发起options请求"}},[t._v("#")]),t._v(" 什么时候浏览器会发起OPTIONS请求？")]),t._v(" "),a("ol",[a("li",[t._v("使用了复杂的 HTTP 方法：除了简单的 GET、POST（带特定的 MIME 类型）和 HEAD 请求，其他如 PUT、DELETE、PATCH 等方法都会触发预检请求。")]),t._v(" "),a("li",[t._v("使用了自定义的头字段：如果请求头中包含了非简单的自定义头字段（如 Authorization、X-Custom-Header 等），浏览器会进行预检。")]),t._v(" "),a("li",[t._v("使用了非简单的内容类型：例如，使用 application/json 这样的内容类型，而不是简单的 application/x-www-form-urlencoded、multipart/form-data 或 text/plain。")]),t._v(" "),a("li",[t._v("服务器可以通过设置 Access-Control-Max-Age 头来指示浏览器在指定的时间内缓存预检请求的结果。这样可以减少频繁的预检请求，提高性能。")])]),t._v(" "),a("h2",{attrs:{id:"请求中常用的字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求中常用的字段"}},[t._v("#")]),t._v(" 请求中常用的字段")]),t._v(" "),a("h3",{attrs:{id:"请求头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求头"}},[t._v("#")]),t._v(" 请求头")]),t._v(" "),a("ul",[a("li",[t._v("Host")]),t._v(" "),a("li",[t._v("User-Agent")]),t._v(" "),a("li",[t._v("Accept")]),t._v(" "),a("li",[t._v("Accept-Language")]),t._v(" "),a("li",[t._v("Accept-Encoding")]),t._v(" "),a("li",[t._v("Accept-Charset")]),t._v(" "),a("li",[t._v("Content-Type")]),t._v(" "),a("li",[t._v("Connection")]),t._v(" "),a("li",[t._v("cookie")]),t._v(" "),a("li",[t._v("Referer")])]),t._v(" "),a("h3",{attrs:{id:"响应头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#响应头"}},[t._v("#")]),t._v(" 响应头")]),t._v(" "),a("ul",[a("li",[t._v("Allow")]),t._v(" "),a("li",[t._v("Age")]),t._v(" "),a("li",[t._v("Cache-Control")]),t._v(" "),a("li",[t._v("Content-Encoding")]),t._v(" "),a("li",[t._v("Content-Language")]),t._v(" "),a("li",[t._v("Content-Length")]),t._v(" "),a("li",[t._v("Content-Type")]),t._v(" "),a("li",[t._v("Date")]),t._v(" "),a("li",[t._v("Etag")]),t._v(" "),a("li",[t._v("Expires")]),t._v(" "),a("li",[t._v("Last-Modified")]),t._v(" "),a("li",[t._v("Pragma")]),t._v(" "),a("li",[t._v("Location")]),t._v(" "),a("li",[t._v("Server")]),t._v(" "),a("li",[t._v("Set-Cookie")])]),t._v(" "),a("h2",{attrs:{id:"get、post的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get、post的区别"}},[t._v("#")]),t._v(" get、post的区别")]),t._v(" "),a("ol",[a("li",[t._v("get传参方式是通过地址栏URL传递，是可以直接看到get传递的参数，post传参方式参数URL不可见，get把请求的数据在URL后通过？连接，通过&进行参数分割。post将参数存放在HTTP的包体内")]),t._v(" "),a("li",[t._v("get传递数据是通过URL进行传递，对传递的数据长度是受到URL大小的限制，URL最大长度是2048个字符。post没有长度限制")]),t._v(" "),a("li",[t._v("get后退不会有影响，post后退会重新进行提交")]),t._v(" "),a("li",[t._v("get请求可以被缓存，post不可以被缓存")]),t._v(" "),a("li",[t._v("get请求只URL编码，post支持多种编码方式")]),t._v(" "),a("li",[t._v("get请求的记录会留在历史记录中，post请求不会留在历史记录")]),t._v(" "),a("li",[t._v("get只支持ASCII字符，post没有字符类型限制")])]),t._v(" "),a("h2",{attrs:{id:"http协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http协议"}},[t._v("#")]),t._v(" HTTP协议")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/weixin_42981419/article/details/86162244",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP原理"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),a("ul",[a("li",[t._v("无状态：HTTP是一种不保存状态,即无状态(stateless)协议。自身不对请求和响应之间的通信状态进行保存。也就是说在HTTP这个 级别,协议对于发送过的请求或响应都不做持久化处理。")]),t._v(" "),a("li",[t._v("无连接【http1.0】：含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间，并且可以提高并发性能，不能和每个用户建立长久的连接，请求一次相应一次，服务端和客户端就中断了。但是无连接有两种方式，早期的http协议是一个请求一个响应之后，直接就断开了。")]),t._v(" "),a("li",[t._v("无连接【http1.1】：现在的http协议1.1版本不是直接就断开了，而是等300秒，这300秒是等什么呢，等着用户有后续的操作，如果用户在这几秒钟之内有新的请求，那么还是通过之前的连接通道来收发消息，如果过了这几秒钟用户没有发送新的请求，那么就会断开连接，这样可以提高效率，减少短时间内建立连接的次数，因为建立连接也是耗时的，默认的是300秒，但是这个时间是可以通过咱们后端的代码来调整的，自己网站根据自己网站用户的行为来分析统计出一个最优的等待时间。")]),t._v(" "),a("li",[t._v("简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。")]),t._v(" "),a("li",[t._v("HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。")]),t._v(" "),a("li",[t._v("支持B/S及C/S模式")]),t._v(" "),a("li",[t._v("被动性，服务端不能主动推送")])]),t._v(" "),a("h3",{attrs:{id:"http-1-0-1-1-2-0区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-1-0-1-1-2-0区别"}},[t._v("#")]),t._v(" HTTP 1.0 1.1 2.0区别")]),t._v(" "),a("ul",[a("li",[t._v("HTTP 1.0：规定浏览器与服务器只保持短暂的连接，浏览器的每次请求都需要与服务器建立一个TCP连接，服务器完成请求处理后立即断开TCP连接，服务器不跟踪每个客户也不记录过去的请求，请求头里：Connection: close")]),t._v(" "),a("li",[t._v("HTTP 1.1：\n"),a("ul",[a("li",[t._v("为了克服HTTP 1.0的这个缺陷，HTTP 1.1支持持久连接（HTTP/1.1的默认模式使用带流水线的持久连接），在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟。")]),t._v(" "),a("li",[t._v("一个包含有许多图像的网页文件的多个请求和应答可以在一个连接中传输，但每个单独的网页文件的请求和应答仍然需要使用各自的连接。")]),t._v(" "),a("li",[t._v("HTTP 1.1还允许客户端不用等待上一次请求结果返回，就可以发出下一次请求，但服务器端必须按照接收到客户端请求的先后顺序依次回送响应结果，以保证客户端能够区分出每次请求的响应内容，这样也显著地减少了整个下载过程所需要的时间。因此Keep-Alive被提出用来解决效率低的问题。")]),t._v(" "),a("li",[t._v("从HTTP/1.1起，默认都开启了Keep-Alive，保持连接特性，简单地说，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。虽然这里使用TCP连接保持了一段时间，但是这个时间是有限范围的，到了时间点依然是会关闭的，所以我们还把其看做是每次连接完成后就会关闭。请求头里：Connection: Keep-Alive")])])]),t._v(" "),a("li",[t._v("HTTP 2.0：\n"),a("ul",[a("li",[t._v("多路复用 (Multiplexing)，多路复用允许同时通过单一的 HTTP/2 连接发起多重的请求-响应消息，http1.1 同一时间域名请求有数量限制")]),t._v(" "),a("li",[t._v("二进制分帧，HTTP/2在 应用层(HTTP/2)和传输层(TCP or UDP)之间增加一个二进制分帧层。在不改动 HTTP/1.x 的语义、方法、状态码、URI 以及首部字段的情况下, 解决了HTTP1.1 的性能限制，改进传输性能，实现低延迟和高吞吐量。在二进制分帧层中， HTTP/2 会将所有传输的信息分割为更小的消息和帧（frame）,并对它们采用二进制格式的编码 ，其中 HTTP1.x 的首部信息会被封装到 HEADER frame，而相应的 Request Body 则封装到 DATA frame 里面。")]),t._v(" "),a("li",[t._v("首部压缩（Header Compression），HTTP/1.1并不支持 HTTP 首部压缩，为此 SPDY 和 HTTP/2 应运而生， SPDY 使用的是通用的DEFLATE 算法，而 HTTP/2 则使用了专门为首部压缩而设计的 HPACK 算法。")]),t._v(" "),a("li",[t._v("服务端推送（Server Push），说明了若采用服务端推送的功能，则JS/CSS资源基本可以和HTML资源同步到达，浏览器可以“无延时”获取JS/CSS资源，客户端的延时最多可以减少一个RTT。通过配置服务器Nginx或者Apache，或者配置后端的响应头开启，但是可能有缓存问题，建议通过Cookie判断，只在第一次打开，最好只推送样式文件")])])])]),t._v(" "),a("h3",{attrs:{id:"http-3-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-3-0"}},[t._v("#")]),t._v(" HTTP 3.0")]),t._v(" "),a("blockquote",[a("p",[t._v("原理是利用UDP协议，QUIC\n解决HTTP2.0中，TCP连接发送失败，重传问题，多路重传互不影响")])]),t._v(" "),a("h3",{attrs:{id:"http请求报文与响应报文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http请求报文与响应报文"}},[t._v("#")]),t._v(" HTTP请求报文与响应报文")]),t._v(" "),a("ul",[a("li",[t._v("请求报文是由三部分组成: 请求行, 请求报头和请求正文")]),t._v(" "),a("li",[t._v("响应报文是由三部分组成: 状态行, 响应头部和响应正文")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.cnblogs.com/an-wen/p/11180076.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP报文示例"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"https"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[t._v("#")]),t._v(" HTTPS")]),t._v(" "),a("h3",{attrs:{id:"为什么要用https"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用https"}},[t._v("#")]),t._v(" 为什么要用https")]),t._v(" "),a("p",[t._v("HTTP报文是包裹在TCP报文中发送的，服务器端收到TCP报文时会解包提取出HTTP报文。但是这个过程中存在一定的风险，HTTP报文是明文，如果中间被截取的话会存在一些信息泄露的风险。那么在进入TCP报文之前对HTTP做一次加密就可以解决这个问题了。HTTPS协议的本质就是HTTP + SSL(or TLS)。在HTTP报文进入TCP报文之前，先使用SSL对HTTP报文进行加密。从网络的层级结构看它位于HTTP协议与TCP协议之间。")]),t._v(" "),a("h3",{attrs:{id:"ssl和tls的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssl和tls的关系"}},[t._v("#")]),t._v(" SSL和TLS的关系")]),t._v(" "),a("p",[t._v("SSL(Secure Socket Layer 安全套接层)是基于HTTPS下的一个协议加密层，标准化后的IETF更名为TLS1.0(Transport Layer Security 安全传输层协议)，可以说TLS就是SSL的新版本3.1")]),t._v(" "),a("h3",{attrs:{id:"http与https区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http与https区别"}},[t._v("#")]),t._v(" HTTP与HTTPS区别?")]),t._v(" "),a("ul",[a("li",[t._v("HTTPS需要申请购买CA证书, HTTP不需要")]),t._v(" "),a("li",[t._v("HTTP是明文传输,不安全, HTTPS是在HTTP基础上加了SSL层,更安全")]),t._v(" "),a("li",[t._v("HTTPS效率低,HTTP效率高")])]),t._v(" "),a("h3",{attrs:{id:"https传输过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#https传输过程"}},[t._v("#")]),t._v(" HTTPS传输过程?")]),t._v(" "),a("ol",[a("li",[t._v("首先进行TCP三次握手连接")]),t._v(" "),a("li",[t._v("然后进行TLS握手，客户端发送clientHello: 支持的版本信息，加密套件候选列表，压缩算法候选列表，随机数random_C，扩展字段")]),t._v(" "),a("li",[t._v("服务端返回\n"),a("ul",[a("li",[t._v("serverHello: 使用的协议版本 version，选择的加密套件 cipher suite，选择的压缩算法 compression method、随机数 random_S;")]),t._v(" "),a("li",[t._v("server_certificate: 返回证书")]),t._v(" "),a("li",[t._v("serverHelloDone")])])]),t._v(" "),a("li",[t._v("客户端对证书验证,验证通过\n"),a("ul",[a("li",[t._v("clientKeyExchange，合法性验证通过之后，客户端计算产生随机数字 Pre-master，并用证书公钥加密，发送给服务器")]),t._v(" "),a("li",[t._v("计算得到协商密钥,encKey=Fuc(randomC, randomS, Pre-Master)")]),t._v(" "),a("li",[t._v("changeCipherSpec，客户端通知服务器后续的通信都采用协商的通信密钥和加密算法进行加密通信")]),t._v(" "),a("li",[t._v("encryptedHandshakeMessage，结合之前所有通信参数的 hash 值与其它相关信息生成一段数据，采用协商密钥 session secret 与算法进行加密，然后发送给服务器用于数据与握手验证;")])])]),t._v(" "),a("li",[t._v("服务端接收后\n"),a("ul",[a("li",[t._v("服务器用私钥解密加密的 Pre-master 数据，基于之前交换的两个明文随机数 randomC 和 randomS，计算得到协商密钥:enckey=Fuc(randomC, randomS, Pre-Master);")]),t._v(" "),a("li",[t._v("计算之前所有接收信息的 hash 值，然后解密客户端发送的 encryptedHandShakeMessage，验证数据和密钥正确性;")]),t._v(" "),a("li",[t._v("changeCipherSpec, 验证通过之后，服务器同样发送 changeCipherSpec 以告知客户端后续的通信都采用协商的密钥与算法进行加密通信;")]),t._v(" "),a("li",[t._v("encryptedHandshakeMessage, 服务器也结合所有当前的通信参数信息生成一段数据并采用协商密钥 session secret 与算法加密并发送到客户端;")])])]),t._v(" "),a("li",[t._v("客户端接收后，进行解密然后验证，验证通过，握手结束")]),t._v(" "),a("li",[t._v("然后用密钥进行对称加密算法进行加解密。（因为非对称加密比较复杂，耗时更长，所以要换成对称加密）")])]),t._v(" "),a("h3",{attrs:{id:"tls握手详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tls握手详解"}},[t._v("#")]),t._v(" tls握手详解")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.cnblogs.com/barrywxx/p/8570715.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https握手"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"为什么需要证书"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要证书"}},[t._v("#")]),t._v(" 为什么需要证书?")]),t._v(" "),a("p",[t._v("防止中间人攻击,验证服务器身份")]),t._v(" "),a("h3",{attrs:{id:"怎么防止的篡改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎么防止的篡改"}},[t._v("#")]),t._v(" 怎么防止的篡改?")]),t._v(" "),a("p",[t._v("证书是公开的,虽然中间人可以拿到证书,但私钥无法获取,公钥无法推断出私钥,所以篡改后不能用私钥加密,强行加密客户也无法解密,强行修改内容,会导致证书内容与签名中的指纹不匹配")]),t._v(" "),a("h2",{attrs:{id:"http状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http状态码"}},[t._v("#")]),t._v(" HTTP状态码")]),t._v(" "),a("ul",[a("li",[t._v("1XX ：信息状态码\n"),a("ul",[a("li",[t._v("100 continue 继续，一般在发送 post 请求时，已发送了 http header 之后服务端将返回此信息，表示确认，之后发送具体参数信息")])])]),t._v(" "),a("li",[t._v("2XX ：成功状态码\n"),a("ul",[a("li",[t._v("200 ok 正常返回信息 --\x3e get")]),t._v(" "),a("li",[t._v("201 created  请求成功并且服务器创建了新资源 --\x3e post")]),t._v(" "),a("li",[t._v("202 accepted 服务器已经接收请求，但尚未处理")])])]),t._v(" "),a("li",[t._v("3XX ：重定向\n"),a("ul",[a("li",[t._v("301 move per 请求的网页已经永久重定向")]),t._v(" "),a("li",[t._v("302 found 临时重定向")]),t._v(" "),a("li",[t._v("303 see other 临时重定向，且总是使用get请求新的url")]),t._v(" "),a("li",[t._v("304 not modified 自从上次请求后，请求的网页未修改过")])])]),t._v(" "),a("li",[t._v("4XX ：客户端错误\n"),a("ul",[a("li",[t._v("400 bad request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求")]),t._v(" "),a("li",[t._v("401 unauthorized 请求未授权")]),t._v(" "),a("li",[t._v("403 forbidden 禁止访问")]),t._v(" "),a("li",[t._v("404 not found 找不到如何与url匹配的资源")]),t._v(" "),a("li",[t._v("405（Mothod Not Allowed), 鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。（服务端支持的谓词，但是权限不够）")])])]),t._v(" "),a("li",[t._v("5XX ：服务器错误\n"),a("ul",[a("li",[t._v("500 internal server error 最常见的服务器端的错误")]),t._v(" "),a("li",[t._v("503 service unacailable 服务器端暂时无法处理请求（可能是过载或维护）")]),t._v(" "),a("li",[t._v("501（Not Implemented），此请求方法不被服务器支持且无法被处理。只有GET和HEAD是要求服务器支持的，它们必定不会返回此错误代码。（服务端本身就不支持的谓词）")])])])]),t._v(" "),a("h2",{attrs:{id:"_301重定向和302重定向的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_301重定向和302重定向的区别"}},[t._v("#")]),t._v(" 301重定向和302重定向的区别")]),t._v(" "),a("ul",[a("li",[t._v("301重定向是永久的重定向，搜索引擎在抓取新的内容的同时也将旧的网址替换为了重定向之后的网址，比如http跳https。除非额外指定，否则这个响应也是可缓存的。")]),t._v(" "),a("li",[t._v("302重定向只是暂时的重定向，搜索引擎会抓取新的内容而保留旧的地址，因为服务器返回302，所以，搜索搜索引擎认为新的网址是暂时的。比如未登录跳登录页面，访问不存在的页面跳转404页面。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。")])]),t._v(" "),a("h2",{attrs:{id:"websocket原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websocket原理"}},[t._v("#")]),t._v(" Websocket原理？")]),t._v(" "),a("blockquote",[a("p",[t._v("WebSocket H5出的一个持久化的协议，只是在握手阶段使用了 HTTP，然后使用TCP进行全双工通信。")])]),t._v(" "),a("h3",{attrs:{id:"方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),a("ol",[a("li",[t._v("new WebSocket")]),t._v(" "),a("li",[t._v("事件onopen，onmessage ，onerror ，onclose")]),t._v(" "),a("li",[t._v("websocket.send(JSON.stringify(msg));")])]),t._v(" "),a("h3",{attrs:{id:"websocket-的其他特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websocket-的其他特点"}},[t._v("#")]),t._v(" WebSocket 的其他特点：")]),t._v(" "),a("ul",[a("li",[t._v("建立在 TCP 协议之上，服务器端的实现比较容易。")]),t._v(" "),a("li",[t._v("与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。")]),t._v(" "),a("li",[t._v("数据格式比较轻量，性能开销小，通信高效。")]),t._v(" "),a("li",[t._v("可以发送文本，也可以发送二进制数据。")]),t._v(" "),a("li",[t._v("没有同源限制，客户端可以与任意服务器通信。")]),t._v(" "),a("li",[t._v("协议标识符是ws（如果加密，则为wss），服务器网址就是 URL。")])]),t._v(" "),a("h3",{attrs:{id:"websocket握手阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websocket握手阶段"}},[t._v("#")]),t._v(" websocket握手阶段")]),t._v(" "),a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-txt"}},[a("code",[t._v("   GET /chat HTTP/1.1\n   Host: server.example.com\n   Upgrade: WebSocket\n   Connection: Upgrade\n   Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==\n   Sec-WebSocket-Protocol: chat, superchat\n   Sec-WebSocket-Version: 13\n   Origin: http://example.com\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-txt"}},[a("code",[t._v("   Upgrade: websocket\n   Connection: Upgrade \n   关键是Upgrade\n   Connection: closed,keep-alive,Upgrade\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-txt"}},[a("code",[t._v("    HTTP/1.1 101 Switching Protocols\n    Upgrade: websocket\n    Connection: Upgrade\n    Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=\n    Sec-WebSocket-Protocol: chat\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h3",{attrs:{id:"websocket-和-long-poll-和-ajax轮询-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websocket-和-long-poll-和-ajax轮询-的区别"}},[t._v("#")]),t._v(" WebSocket 和 long poll 和 Ajax轮询 的区别")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("WebSocket 是HTML5出的东西（协议）,和html没太大关系，只是在握手阶段用了http协议，是一个 持久化 的协议，相对于HTTP这种 非持久 的协议来说\n"),a("img",{attrs:{src:s(432),alt:"http与websocket关系"}})])]),t._v(" "),a("li",[a("p",[t._v("long poll\nlong poll 其实原理跟 ajax轮询 差不多，都是采用轮询的方式，不过采取的是阻塞模型（一直打电话，没收到就不挂电话），也就是说，客户端发起请求后，如果没消息，服务端就一直不返回 Response 给客户端，直到有消息了，才返回给客户端，请求才算结束，然后建立新的请求。")])]),t._v(" "),a("li",[a("p",[t._v("ajax轮询\najax轮询 的原理非常简单，让浏览器隔个几秒就发送一次请求，询问服务器是否有新信息。")])])]),t._v(" "),a("blockquote",[a("p",[t._v("从上面可以看出其实这两种方式，都是在不断地建立HTTP连接，然后等待服务端处理，可以体现HTTP协议的另外一个特点，被动性。\nWebsocket只用过一次Http请求就可以源源不断的信息传送。")])]),t._v(" "),a("h3",{attrs:{id:"websocket解决的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websocket解决的问题"}},[t._v("#")]),t._v(" websocket解决的问题")]),t._v(" "),a("ul",[a("li",[t._v("解决了被动性，用websocket可以让服务端主动推送消息给客户端")]),t._v(" "),a("li",[t._v("提升了效率，只用一次HTTP握手，所以说整个通讯过程是建立在一次连接/状态中")])]),t._v(" "),a("h2",{attrs:{id:"缓存位置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存位置"}},[t._v("#")]),t._v(" 缓存位置")]),t._v(" "),a("ol",[a("li",[t._v("Service Worker\n"),a("ul",[a("li",[t._v("缓存是持续性的")]),t._v(" "),a("li",[t._v("可以自由选择缓存哪些文件，当缓存没有命中，需要调用fetch方法获取")])])]),t._v(" "),a("li",[t._v("H5 Web Manifest 缓存")]),t._v(" "),a("li",[t._v("Memory Cache\n"),a("ul",[a("li",[t._v("内存中的缓存，读取速度快，但持续性短，随着进程的释放而释放，关闭Tab就消失")]),t._v(" "),a("li",[t._v("由系统决定哪些文件是丢进内存中缓存，一般是小的且使用率高的")])])]),t._v(" "),a("li",[t._v("Disk Cache\n"),a("ul",[a("li",[t._v("容量和存储时效性高")]),t._v(" "),a("li",[t._v("根据 HTTP Header 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求")])])]),t._v(" "),a("li",[t._v("Push Cache\n"),a("ul",[a("li",[t._v("Push Cache 是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用")]),t._v(" "),a("li",[t._v("缓存时间也很短暂，只在会话（Session）中存在，一旦会话结束就被释放")]),t._v(" "),a("li",[t._v("所有的资源都能被推送，但是 Edge 和 Safari 浏览器兼容性不怎么好")]),t._v(" "),a("li",[t._v("可以推送 no-cache 和 no-store 的资源")]),t._v(" "),a("li",[t._v("一旦连接被关闭，Push Cache 就被释放")]),t._v(" "),a("li",[t._v("多个页面可以使用相同的 HTTP/2 连接，也就是说能使用同样的缓存")]),t._v(" "),a("li",[t._v("Push Cache 中的缓存只能被使用一次")]),t._v(" "),a("li",[t._v("浏览器可以拒绝接受已经存在的资源推送")]),t._v(" "),a("li",[t._v("你可以给其他域名推送资源")])])])]),t._v(" "),a("ul",[a("li",[t._v("网络请求")])]),t._v(" "),a("h2",{attrs:{id:"http缓存-浏览器缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http缓存-浏览器缓存"}},[t._v("#")]),t._v(" http缓存/浏览器缓存")]),t._v(" "),a("blockquote",[a("p",[t._v("浏览器第一次向一个web服务器发起http请求后，服务器会返回请求的资源，并且在响应头中添加一些有关缓存的字段如：Cache-Control、Expires、Last-Modified、ETag、Date等等, 之后浏览器再向该服务器请求该资源就可以视情况使用强缓存和协商缓存。")])]),t._v(" "),a("h3",{attrs:{id:"缓存控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存控制"}},[t._v("#")]),t._v(" 缓存控制")]),t._v(" "),a("p",[t._v("在http中，控制缓存开关的字段有两个：Pragma 和 Cache-Control。")]),t._v(" "),a("h3",{attrs:{id:"pragma"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pragma"}},[t._v("#")]),t._v(" Pragma")]),t._v(" "),a("p",[t._v("Pragma有两个字段Pragma和Expires。Pragma的值为no-cache时，表示禁用缓存，Expires的值是一个GMT时间，表示该缓存的有效时间。")]),t._v(" "),a("h3",{attrs:{id:"优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优先级"}},[t._v("#")]),t._v(" 优先级")]),t._v(" "),a("p",[t._v("Pragma -> Cache-Control -> Expires")]),t._v(" "),a("h3",{attrs:{id:"缓存类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存类型"}},[t._v("#")]),t._v(" 缓存类型")]),t._v(" "),a("ul",[a("li",[t._v("强缓存：浏览器直接从本地缓存中获取数据，不与服务器进行交互; 通过Cache-Control或者Expires判断是否过期。")]),t._v(" "),a("li",[t._v("协商缓存：浏览器发送请求到服务器，服务器判定是否可使用本地缓存; 通过ETag和Last-Modifed判断。")]),t._v(" "),a("li",[t._v("联系与区别：两种缓存方式最终使用的都是本地缓存；前者无需与服务器交互，后者需要;")])]),t._v(" "),a("h3",{attrs:{id:"强缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[t._v("#")]),t._v(" 强缓存")]),t._v(" "),a("blockquote",[a("p",[t._v("强缓存会触发from disk cache和from memory cache（关闭进程窗口就没了）,先去内存看，如果有，直接加载,如果内存没有，择取硬盘获取，如果有直接加载,如果硬盘也没有，那么就进行网络请求,加载到的资源缓存到硬盘和内存")])]),t._v(" "),a("ul",[a("li",[t._v("强缓存是利用http的返回头中的Expires或者Cache-Control两个字段来控制的，用来表示资源的缓存时间。")]),t._v(" "),a("li",[t._v("Cache-Control 可以由多个字段组合而成，（max-age）（s-maxage 同 max-age，覆盖 max-age、Expires，但仅适用于共享缓存，在私有缓存中被忽略。）")]),t._v(" "),a("li",[t._v("Cache-Control 的优先级更高，max-age 指定一个时间长度，在这个时间段内缓存是有效的，单位是s。")]),t._v(" "),a("li",[t._v("（public 表明响应可以被任何对象（发送请求的客户端、代理服务器等等）缓存。）")]),t._v(" "),a("li",[t._v("（private 表明响应只能被单个用户（可能是操作系统用户、浏览器用户）缓存，是非共享的，不能被代理服务器缓存。）")]),t._v(" "),a("li",[t._v("（no-cache 含义是不使用本地缓存，也就是先与服务器确认缓存是否可用。）")]),t._v(" "),a("li",[t._v("（no-store 禁止缓存，每次请求都要向服务器重新获取数据。）")]),t._v(" "),a("li",[t._v("（must-revalidate 指定如果页面是过期的，则去服务器进行获取。）")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/u012375924/article/details/82806617",target:"_blank",rel:"noopener noreferrer"}},[t._v("详解"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[t._v("#")]),t._v(" 协商缓存")]),t._v(" "),a("ul",[a("li",[t._v("协商缓存是利用http的返回头中的ETag或Last-Modified字段来控制的")]),t._v(" "),a("li",[t._v("ETag和If-None-Match，优先级更高\n"),a("ul",[a("li",[t._v('强ETag表示形式："22FAA065-2664-4197-9C5E-C92EA03D0A16"。')]),t._v(" "),a("li",[t._v('弱ETag表现形式：w/"22FAA065-2664-4197-9C5E-C92EA03D0A16"。')])])]),t._v(" "),a("li",[t._v("Last-Modified和If-Modified-Since")])]),t._v(" "),a("blockquote",[a("p",[t._v("有ETag和Last-Modified字段，下次请求会带上这两个字段，名字分别If-None-Match和If-Modified-Since，吻合，则返回304响应，使用协商缓存。")])]),t._v(" "),a("h3",{attrs:{id:"启发式缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启发式缓存"}},[t._v("#")]),t._v(" 启发式缓存")]),t._v(" "),a("p",[t._v("如果Expires, Cache-Control: max-age, 或 Cache-Control:s-maxage 都没有在响应头中出现, 并且也没有其它缓存的设置, 那么浏览器默认会采用一个启发式的算法, RFC建议通常会取响应头的Date_value - Last-Modified_value值的10%作为缓存时间（Chrome，Webkit）。\nFirefox是取的（10%和7天的最小值）")]),t._v(" "),a("blockquote",[a("p",[t._v("当 ctrl+f5 强制刷新网页时，直接从服务器加载，跳过强缓存和协商缓存；\n当 f5 刷新网页时，跳过强缓存，但是会检查协商缓存；")])]),t._v(" "),a("h3",{attrs:{id:"date和age的区别-作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#date和age的区别-作用"}},[t._v("#")]),t._v(" Date和Age的区别，作用？")]),t._v(" "),a("p",[t._v("作用：可以用来判断缓存是否命中，新鲜度。Date比当前时间老，说明命中缓存")]),t._v(" "),a("ul",[a("li",[t._v("Date：Date头域表示报文创建的日期，比如请求一个图片，第一次获取到了，是a时间，然后被缓存，刷新当前页面，date仍然为a时\n时间的描述格式由rfc822定义。例如，Date: Mon, 04 Jul 2011 05:53:36 GMT。")]),t._v(" "),a("li",[t._v("Age： 消息头里包含对象在缓存代理中存贮的时长，以秒为单位。Age的值通常接近于0。表示此对象刚刚从原始服务器获取不久；其他的值则是表示代理服务器当前的系统时间与此应答中的通用头 Date 的值之差。")])]),t._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- 页面禁止缓存的方法 --\x3e")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("Cache-Control"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("no-cache, no-store, must-revalidate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("Pragma"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("no-cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("Expires"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h3",{attrs:{id:"http-请求和响应的gzip压缩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-请求和响应的gzip压缩"}},[t._v("#")]),t._v(" Http 请求和响应的gzip压缩")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.cnblogs.com/LO-ME/p/7377082.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("gzip压缩详解"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[a("p",[t._v("原理：\n简单来说， Gzip压缩是在一个文本文件中找出类似的字符串， 并临时替换他们，使整个文件变小。\n这种形式的压缩对Web来说非常适合， 因为HTML和CSS文件通常包含大量的重复的字符串，例如空格，标签。")])]),t._v(" "),a("li",[a("p",[t._v("优缺点：\n优点是纯文本可以压缩至40%，缺点是增加服务器占用资源，对JPEG压缩不够好。")])]),t._v(" "),a("li",[a("p",[t._v("使用方式：\n服务器端进行配置，开始gzip，然后请求头增加Accept-Encoding: gzip即可，服务器会对它进行压缩")])])]),t._v(" "),a("h3",{attrs:{id:"nginx开启gzip"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx开启gzip"}},[t._v("#")]),t._v(" nginx开启gzip")]),t._v(" "),a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-txt"}},[a("code",[t._v('开启状态\n开启类型\n大小限制，最小多少开启\n在以下条件禁止\ngzip on;\ngzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\ngzip_min_length 1024;\ngzip_disable "MSIE [1-6]\\.";\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("h3",{attrs:{id:"检查是否开启成功"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检查是否开启成功"}},[t._v("#")]),t._v(" 检查是否开启成功")]),t._v(" "),a("ol",[a("li",[t._v("观察响应头是否有Content-Encoding: gzip")]),t._v(" "),a("li",[t._v("在火狐开发者工具中，网络选项卡，对比同一资源传输尺寸和实际尺寸")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("启用方法")]),t._v(" "),a("p",[t._v("通过请求和响应头中增加"),a("br"),t._v("\nAccept-Encoding: gzip"),a("br"),t._v("\nContent-Encoding: gzip"),a("br"),t._v("\n确定客户端或服务器端是否支持压缩")])]),a("p",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000015816331",target:"_blank",rel:"noopener noreferrer"}},[t._v("一张图解释缓存"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"https://www.cnblogs.com/guwufeiyang/p/12868583.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("图解强缓存和协商缓存"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"从浏览器地址栏输入url后发生了什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从浏览器地址栏输入url后发生了什么"}},[t._v("#")]),t._v(" 从浏览器地址栏输入URL后发生了什么?")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000006879700?utm_source=sf-related",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"总体来说分为以下几个过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总体来说分为以下几个过程"}},[t._v("#")]),t._v(" 总体来说分为以下几个过程:")]),t._v(" "),a("ol",[a("li",[t._v("DNS解析")]),t._v(" "),a("li",[t._v("TCP连接")]),t._v(" "),a("li",[t._v("发送HTTP请求")]),t._v(" "),a("li",[t._v("服务器处理请求并返回HTTP报文,（HTTP1.0返回了数据就会断开TCP连接，Http1.1不会，HTTP1.1的长连接非常easy在空暇后自己主动断开，一般来说这个时间是300s左右。）")]),t._v(" "),a("li",[t._v("浏览器解析渲染页面")])]),t._v(" "),a("h3",{attrs:{id:"dns解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dns解析"}},[t._v("#")]),t._v(" DNS解析")]),t._v(" "),a("blockquote",[a("p",[t._v("DNS：域名系统，是一项互联网服务，域名和IP的分布式数据库"),a("br"),t._v(" "),a("a",{attrs:{href:"https://www.xuecaijie.com/it/157.html#1Q64p5DeC8dKFF",target:"_blank",rel:"noopener noreferrer"}},[t._v("DNS解析过程"),a("OutboundLink")],1),t._v("\nDNS使用的协议，TCP/UDP 53端口，都在使用，因为UDP协议报文最大长度是512，所以辅DNS服务器向主DNS服务器查询数据是否变动，同步数据时用的时TCP，而客户端的单个查询，使用UDP，对服务器负载更小，响应更快，因为不需要握手\n所以事实上，很多 DNS 服务器进行配置的时候，也仅支持 UDP 查询包\n因为 UDP 没有像 TCP 一样的序列号机制来标识报文，所以默认只有一个 UDP 报文\n域名解析的过程是逐级查询的")])]),t._v(" "),a("ol",[a("li",[t._v("查找浏览器缓存")]),t._v(" "),a("li",[t._v("查找操作系统缓存")]),t._v(" "),a("li",[t._v("在host文件中查找")]),t._v(" "),a("li",[t._v("查找路由器缓存")]),t._v(" "),a("li",[t._v("查找本地DNS服务器 比如互联网服务提供商（如中国电信），比较著名的 114.114.114.114")]),t._v(" "),a("li",[t._v("查找根DNS服务器\n客户端先向本地DNS发请求，然后本地DNS再向根域名发请求，会判别这个域名(.com)是授权给哪台服务器管理,并返回这个顶级DNS服务器(.com DNS)的IP。"),a("br"),t._v("\n本地DNS收到这台顶级DNS的服务器IP后，会向该服务器发起查询，如果该服务器无法解析，会返回权威DNS服务器的IP地址，即下一级的DNS服务器IP（nicefilm.com），继续查找，直到服务器找到(www.nicefilm.com)的主机，然后返回给本地DNS，再返回到客户端。")])]),t._v(" "),a("blockquote",[a("p",[t._v("本地DNS一般是指你电脑上网时IPv4或者IPv6设置中填写的那个DNS。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("扩展问题：html如何做dns优化？可以通过以下代码预获取DNS。")])]),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("x-dns-prefetch-control"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("on"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("dns-prefetch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://bdimg.share.baidu.com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h3",{attrs:{id:"建立tcp-连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#建立tcp-连接"}},[t._v("#")]),t._v(" 建立TCP 连接")]),t._v(" "),a("p",[a("img",{attrs:{src:s(433),alt:"TCP报文首部格式"}}),t._v(" "),a("img",{attrs:{src:s(434),alt:"序号与确认号字段含义，seq，ack"}}),t._v(" "),a("img",{attrs:{src:s(435),alt:"六个控制位"}}),t._v(" "),a("img",{attrs:{src:s(436),alt:"六个控制位"}}),t._v(" "),a("img",{attrs:{src:s(437),alt:"连接图"}}),t._v(" "),a("img",{attrs:{src:s(438),alt:"三次握手详细描述"}}),t._v(" "),a("img",{attrs:{src:s(439),alt:"两次握手出现的问题"}})]),t._v(" "),a("h3",{attrs:{id:"tcp三次握手语言描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp三次握手语言描述"}},[t._v("#")]),t._v(" TCP三次握手语言描述")]),t._v(" "),a("ol",[a("li",[t._v("客户端向服务端发送连接请求报文，报文中同步位SYN置为1，同时选择一个初始序号seq 为 x")]),t._v(" "),a("li",[t._v("服务端收到后，如果同意建立连接，则向客户端发送确认，在报文中把SYN位和ACK位都置为1，同时还有初始序号和确认号")]),t._v(" "),a("li",[t._v("客户端收到后，向服务端发送确认收到，ACK置为1，同时还有确认号和自己的序号，发送后进入连接状态。服务端收到后也进入连接态。")])]),t._v(" "),a("h3",{attrs:{id:"两次握手出现的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两次握手出现的问题"}},[t._v("#")]),t._v(" 两次握手出现的问题")]),t._v(" "),a("p",[t._v("A是客户端，B是服务端。如果A发送的请求遇见网络堵塞，导致一直没到B，而A又重发了，最后完成了，之前发的才到。导致B一直等待中，会浪费资源。")]),t._v(" "),a("h3",{attrs:{id:"tcp断开连接-四次握手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp断开连接-四次握手"}},[t._v("#")]),t._v(" TCP断开连接，四次握手")]),t._v(" "),a("p",[a("img",{attrs:{src:s(440),alt:"图1"}}),t._v(" "),a("img",{attrs:{src:s(441),alt:"图2"}})]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.cn/post/6919056368250912782",target:"_blank",rel:"noopener noreferrer"}},[t._v("TCP三次握手，四次挥手详解"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"四次挥手文字描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手文字描述"}},[t._v("#")]),t._v(" 四次挥手文字描述")]),t._v(" "),a("ol",[a("li",[t._v("A向B发送连接释放请求，FIN为1，序号u")]),t._v(" "),a("li",[t._v("B收到后，发送确认请求，ACK为1，序号和确认号，继续发送剩余的信息。而A收到后A到B的连接就释放了")]),t._v(" "),a("li",[t._v("B发送完后，发送释放请求，FIN为1，ACK为1，序号和确认号")]),t._v(" "),a("li",[t._v("A收到后，发送确认请求，ACK为1，序号和确认号，等待2MSL后关闭。而B在收到A的请求后就关闭")])]),t._v(" "),a("h3",{attrs:{id:"为什么要等待2msl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要等待2msl"}},[t._v("#")]),t._v(" 为什么要等待2MSL")]),t._v(" "),a("ol",[a("li",[t._v("保证最后一个请求能到达B，如果出现网络堵塞等，可以重发")]),t._v(" "),a("li",[t._v("防止旧的请求信息出现在新的连接中")])]),t._v(" "),a("h3",{attrs:{id:"发送http请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发送http请求"}},[t._v("#")]),t._v(" 发送HTTP请求")]),t._v(" "),a("blockquote",[a("p",[t._v("有缓存则使用缓存，没有则请求")])]),t._v(" "),a("h3",{attrs:{id:"浏览器解析渲染页面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器解析渲染页面"}},[t._v("#")]),t._v(" 浏览器解析渲染页面")]),t._v(" "),a("p",[a("img",{attrs:{src:s(442),alt:"示意图"}}),t._v(" "),a("a",{attrs:{href:"https://blog.csdn.net/qq_41807645/article/details/80839757",target:"_blank",rel:"noopener noreferrer"}},[t._v("详细过程参考"),a("OutboundLink")],1)]),t._v(" "),a("ol",[a("li",[t._v("先构建DOM树：从上到下解析HTML文档生成DOM节点树（DOM tree），也叫内容树（content tree），遇见script标签和link css标签会开始下载执行，没加异步处理会阻塞渲染和解析，CSS只会阻塞渲染，执行完后再往下解析，所以JS文件不要放到head里，css文件尽量小，JS通过DOM API和CSSOM API来操作DOM树和CSS树；")]),t._v(" "),a("li",[t._v("再构建CSS Rule Tree：加载解析样式生成CSS树；")]),t._v(" "),a("li",[t._v("构建渲染树(render tree)：根据DOM树和CSSOM树,生成渲染树(render tree)；渲染树：按顺序展示在屏幕上的一系列矩形，这些矩形带有字体，颜色和尺寸等视觉属性。渲染树会忽略掉不需要渲染的元素，比如head、display:none的元素等")]),t._v(" "),a("li",[t._v("布局（layout）：根据渲染树将节点树的每一个节点布局在屏幕上的正确位置；")]),t._v(" "),a("li",[t._v("绘制（painting）：遍历渲染树绘制所有节点，为每一个节点适用对应的样式，Native GUI的API绘制;")])]),t._v(" "),a("blockquote",[a("p",[t._v("以上步骤并不是一次性顺序完成的。如果DOM或者CSSOM被修改，以上过程会被重复执行。实际上，CSS和JavaScript往往会多次修改DOM或者CSSOM。")])]),t._v(" "),a("div",{staticClass:"custom-block danger"},[a("p",{staticClass:"title"}),a("p",[t._v("注意：上述这个过程是理论上是逐步完成的，但是实际实现中为了更好的用户体验，渲染引擎为了尽可能早的将内容呈现到屏幕上，会在构建DOM树的同时去解析CSS构建CSS树，并且还会去生成Rendering Tree。解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其余内容，这样就可以更快的显示出页面，")])]),a("h2",{attrs:{id:"页面渲染优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#页面渲染优化"}},[t._v("#")]),t._v(" 页面渲染优化")]),t._v(" "),a("ul",[a("li",[t._v("HTML文档结构层次尽量少，最好不深于六层")]),t._v(" "),a("li",[t._v("脚本尽量后放，放在前即可")]),t._v(" "),a("li",[t._v("少量首屏样式内联放在标签内")]),t._v(" "),a("li",[t._v("样式结构层次尽量简单")]),t._v(" "),a("li",[t._v("在脚本中尽量减少DOM操作，尽量缓存访问DOM的样式信息，避免过度触发回流")]),t._v(" "),a("li",[t._v("减少通过JavaScript代码修改元素样式，尽量使用修改class名方式操作样式或动画")]),t._v(" "),a("li",[t._v("动画尽量使用在绝对定位或固定定位的元素上")]),t._v(" "),a("li",[t._v("隐藏在屏幕外，或在页面滚动时，尽量停止动画")]),t._v(" "),a("li",[t._v("尽量缓存DOM查找，查找器尽量简洁")]),t._v(" "),a("li",[t._v("涉及多域名的网站，可以开启域名预解析")])]),t._v(" "),a("h2",{attrs:{id:"页面渲染的大致过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#页面渲染的大致过程"}},[t._v("#")]),t._v(" 页面渲染的大致过程")]),t._v(" "),a("blockquote",[a("p",[t._v("页面依赖外部资源下载是并行的，但是DOM树解析、js执行和首屏渲染却是串行的。理解整个过程，就能明白为什么Head中不要放JS的原因，以及CSS为什么要尽量小。")])]),t._v(" "),a("ul",[a("li",[t._v("先下载解析HTML并建立DOM树，再解析css绘制渲染树。前者搭建页面结构，后者增添页面样式。而在建立DOM树的过程就会遇到诸如img、外联css和script标签，此时就要加载外部资源了")]),t._v(" "),a("li",[t._v("加载资源是由单独的下载线程进行异步加载的，浏览器会并行加载，不过具体并行最大数量是有一定限制的，不同浏览器可能不一样")]),t._v(" "),a("li",[t._v("但是加载css和js资源比较特殊，它们的加载会影响页面渲染。css加载不会阻塞DOM树解析，但会阻塞渲染（这是由于渲染依赖于css，如果不等css加载完就渲染的话那么等css加载解析完又得重新渲染，可能又要重绘或者回流）")]),t._v(" "),a("li",[t._v("对于js资源的加载，则会阻塞DOM树的构建和渲染，除非设置了script标签的异步属性, 放在head中会在解析DOM树和渲染页面前就加载，并阻塞页面。js正常情况下加载完就会立即执行")]),t._v(" "),a("li",[t._v("在js脚本中只能访问当前script 以上的DOM，脚本执行结束后再继续解析DOM")]),t._v(" "),a("li",[t._v("js执行引擎和页面渲染是由不同的线程来执行，但这两者是互斥的，也就是说js执行过程是无法构建DOM和渲染页面的。这是一种优化机制，由于js可能会对DOM及样式进行修改")]),t._v(" "),a("li",[t._v("如果解析js过程中同时构建DOM，就可能造成前后内容不一致或者重复构建。所以应该把script放在body中，使页面更快完成渲染")])]),t._v(" "),a("h2",{attrs:{id:"url与uri的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#url与uri的区别"}},[t._v("#")]),t._v(" URL与URI的区别")]),t._v(" "),a("p",[t._v("URI 是统一资源标识符，而 URL 是统一资源定位符，URL是URI的子集。")]),t._v(" "),a("h2",{attrs:{id:"数据传输过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据传输过程"}},[t._v("#")]),t._v(" 数据传输过程")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://blog.51cto.com/14557673/2440993",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文章"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"说一下cors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说一下cors"}},[t._v("#")]),t._v(" 说一下CORS？")]),t._v(" "),a("p",[t._v("CORS是一种新标准，支持同源通信，也支持跨域通信。")]),t._v(" "),a("h2",{attrs:{id:"如何中断ajax请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何中断ajax请求"}},[t._v("#")]),t._v(" 如何中断ajax请求？")]),t._v(" "),a("p",[t._v("一种是设置超时时间让ajax自动断开，另一种是手动停止ajax请求，其核心是调用XML对象的abort方法，ajax.abort()")]),t._v(" "),a("h2",{attrs:{id:"说一下事件委托"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说一下事件委托"}},[t._v("#")]),t._v(" 说一下事件委托？")]),t._v(" "),a("blockquote",[a("p",[t._v("事件委托是指将事件绑定到目标元素的父元素上，利用冒泡机制触发该事件，React的事件机制就使用了事件委托，是合成事件。")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("ulEl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'click'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" target "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("srcElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("target "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nodeName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"LI"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h2",{attrs:{id:"target、currenttarget的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#target、currenttarget的区别"}},[t._v("#")]),t._v(" target、currentTarget的区别？")]),t._v(" "),a("ul",[a("li",[t._v("currentTarget当前所绑定事件的元素")]),t._v(" "),a("li",[t._v("target当前被点击的元素，比如获取Select的value，在onChange回调中使用event.target.value")])]),t._v(" "),a("h2",{attrs:{id:"osi-7层模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#osi-7层模型"}},[t._v("#")]),t._v(" OSI 7层模型")]),t._v(" "),a("ul",[a("li",[t._v("应用层")]),t._v(" "),a("li",[t._v("表示层")]),t._v(" "),a("li",[t._v("会话层,")]),t._v(" "),a("li",[t._v("传输层(TCP/UDP)")]),t._v(" "),a("li",[t._v("网络层(IP,ICMP,IGMP)")]),t._v(" "),a("li",[t._v("数据链路层(ARP和RARP(Reverse Address Resolve Protocol)即逆地址解析协议，该协议实现了IP地址和物理地址(MAC地址)之间的转换)")]),t._v(" "),a("li",[t._v("物理层(处理数据转电信号)")])]),t._v(" "),a("h2",{attrs:{id:"tcp-ip协议四层模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-ip协议四层模型"}},[t._v("#")]),t._v(" TCP/IP协议四层模型")]),t._v(" "),a("h3",{attrs:{id:"网络接口层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络接口层"}},[t._v("#")]),t._v(" 网络接口层")]),t._v(" "),a("ul",[a("li",[t._v("实现网卡接口的网络驱动，以处理数据在以太网线等物理媒介上的传输")]),t._v(" "),a("li",[t._v("网络驱动程序隐藏了不同物理网络的不同电气特性，为上层协议提供一个统一的接口")])]),t._v(" "),a("h3",{attrs:{id:"网络层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络层"}},[t._v("#")]),t._v(" 网络层")]),t._v(" "),a("p",[t._v("ARP和RARP(Reverse Address Resolve Protocol)即逆地址解析协议，该协议实现了IP地址和物理地址(MAC地址)之间的转换")]),t._v(" "),a("h3",{attrs:{id:"传输层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#传输层"}},[t._v("#")]),t._v(" 传输层")]),t._v(" "),a("h3",{attrs:{id:"应用层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用层"}},[t._v("#")]),t._v(" 应用层")]),t._v(" "),a("h2",{attrs:{id:"tcp与udp区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp与udp区别"}},[t._v("#")]),t._v(" TCP与UDP区别：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("连接方面区别")]),t._v(" "),a("ul",[a("li",[t._v("TCP面向连接（如打电话要先拨号建立连接）。")]),t._v(" "),a("li",[t._v("UDP是无连接的，即发送数据之前不需要建立连接。")])])]),t._v(" "),a("li",[a("p",[t._v("安全方面的区别")]),t._v(" "),a("ul",[a("li",[t._v("TCP提供可靠的服务，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达。")]),t._v(" "),a("li",[t._v("UDP尽最大努力交付，即不保证可靠交付。")])])]),t._v(" "),a("li",[a("p",[t._v("传输效率的区别")]),t._v(" "),a("ul",[a("li",[t._v("TCP传输效率相对较低。")]),t._v(" "),a("li",[t._v("UDP传输效率高，适用于对高速传输和实时性有较高的通信或广播通信。")])])]),t._v(" "),a("li",[a("p",[t._v("连接对象数量的区别")]),t._v(" "),a("ul",[a("li",[t._v("TCP连接只能是点到点、一对一的。字节流")]),t._v(" "),a("li",[t._v("UDP支持一对一，一对多，多对一和多对多的交互通信。")])])]),t._v(" "),a("li",[a("p",[t._v("GET产生一个TCP数据包；POST产生两个TCP数据包。")]),t._v(" "),a("ul",[a("li",[t._v("对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；")]),t._v(" "),a("li",[t._v("而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("TCP是一个面向连接的、可靠的、基于字节流的传输层协议。\n而UDP是一个面向无连接的传输层协议。(就这么简单，其它TCP的特性也就没有了)。")])]),a("h3",{attrs:{id:"具体来分析-和-udp-相比-tcp-有三大核心特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#具体来分析-和-udp-相比-tcp-有三大核心特性"}},[t._v("#")]),t._v(" 具体来分析，和 UDP 相比，TCP 有三大核心特性")]),t._v(" "),a("ol",[a("li",[t._v("面向连接：所谓的连接，指的是客户端和服务器的连接，在双方互相通信之前，TCP 需要三次握手建立连接，而 UDP 没有相应建立连接的过程。")]),t._v(" "),a("li",[t._v("可靠性：TCP 花了非常多的功夫保证连接的可靠，这个可靠性体现在哪些方面呢？一个是有状态，另一个是可控制。TCP 会精准记录哪些数据发送了，哪些数据被对方接收了，哪些没有被接收到，而且保证数据包按序到达，不允许半点差错。这是有状态。当意识到丢包了或者网络环境不佳，TCP 会根据具体情况调整自己的行为，控制自己的发送速度或者重发。这是可控制。相应的，UDP 就是无状态 , 不可控的。")]),t._v(" "),a("li",[t._v("面向字节流：UDP 的数据传输是基于数据报的，这是因为仅仅只是继承了 IP 层的特性，而 TCP 为了维护状态，将一个个 IP 包变成了字节流。")])]),t._v(" "),a("h2",{attrs:{id:"跨域相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨域相关"}},[t._v("#")]),t._v(" 跨域相关")]),t._v(" "),a("blockquote",[a("p",[t._v('跨域问题来源于浏览器的同源策略，浏览器为了提高网站的安全性\n同源是指"协议+域名+端口')])]),t._v(" "),a("h3",{attrs:{id:"如何解决跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何解决跨域"}},[t._v("#")]),t._v(" 如何解决跨域")]),t._v(" "),a("ol",[a("li",[t._v("通过jsonp跨域，需要服务端配合")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" script "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nscript"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/javascript'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 传参并指定回调执行函数为onBack")]),t._v("\nscript"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("src "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://www.....:8080/login?user=admin&callback=onBack'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 回调执行函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onBack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("nginx代理跨域")])]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("server "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        listen       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        server_name  localhost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 用户访问 localhost，则反向代理到https://api.shanbay.com")]),t._v("\n        location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            root   html"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            index  index.html index.htm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            proxy_pass https://api.shanbay.com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("//增加这行\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("后端在头部信息里面设置安全域名")])]),t._v(" "),a("div",{staticClass:"language-php line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[t._v("add_header "),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'Access-Control-Allow-Origin'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h2",{attrs:{id:"正向代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正向代理"}},[t._v("#")]),t._v(" 正向代理")]),t._v(" "),a("p",[t._v("类似VPN，通过他可以访问一些访问不到的网站")]),t._v(" "),a("h2",{attrs:{id:"反向代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反向代理"}},[t._v("#")]),t._v(" 反向代理")]),t._v(" "),a("p",[t._v("类似负载均衡，不需要知道目标地址，只需要知道代理地址即可访问")]),t._v(" "),a("h2",{attrs:{id:"什么是会话cookie-什么是持久cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是会话cookie-什么是持久cookie"}},[t._v("#")]),t._v(" 什么是会话cookie,什么是持久cookie?")]),t._v(" "),a("p",[t._v("cookie是服务器返回的，指定了expire time（有效期）的是持久cookie,没有指定的是会话cookie")]),t._v(" "),a("h3",{attrs:{id:"主要属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主要属性"}},[t._v("#")]),t._v(" 主要属性")]),t._v(" "),a("ul",[a("li",[t._v("name")]),t._v(" "),a("li",[t._v("value")]),t._v(" "),a("li",[t._v("domain")]),t._v(" "),a("li",[t._v("path")]),t._v(" "),a("li",[t._v("expires/Max-Age")]),t._v(" "),a("li",[t._v("Size")]),t._v(" "),a("li",[t._v("http")]),t._v(" "),a("li",[t._v("secure")])])])}),[],!1,null,null,null);a.default=r.exports}}]);