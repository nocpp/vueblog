(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{505:function(t,s,e){"use strict";e.r(s);var a=e(2),i=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("工作区-（add）->暂存区-（commit）->版本区--\x3e远程仓库\n关联远程仓库 git remote add/remove origin https://ss.git\n")])])]),s("h2",{attrs:{id:"强制拉取线上最新的-覆盖本地-不进行合并"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强制拉取线上最新的-覆盖本地-不进行合并"}},[t._v("#")]),t._v(" 强制拉取线上最新的，覆盖本地，不进行合并")]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git fetch --all //只是下载代码到本地，不进行合并操作\ngit reset --hard origin/master  //把HEAD指向最新下载的版本\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h2",{attrs:{id:"git-中-origin是什么意思"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-中-origin是什么意思"}},[t._v("#")]),t._v(" git 中 origin是什么意思？")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("origin就是远程仓库链接的别名，可以修改为其它名字。origin是git默认的名字，master是其默认分支。没关联远程仓库时，默认指向本地仓库。\n")])])]),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git remote -v\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("使用以上git命令可以看到如下输出")]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("origin https://github.com/user1/repository.git (fetch)\norigin https://github.com/user1/repository.git (push)\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git remote add upstream https://github.com/user1/repository.git\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("使用以上git命令可以看到如下输出")]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("origin https://github.com/user2/repository.git (fetch)\norigin https://github.com/user2/repository.git (push)\nupstream https://github.com/user1/repository.git (push)\nupstream https://github.com/user1/repository.git (push)\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("增加了指向user1代码库的upstream")]),t._v(" "),s("h2",{attrs:{id:"git-分支原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-分支原理"}},[t._v("#")]),t._v(" git 分支原理")]),t._v(" "),s("ul",[s("li",[t._v("HEAD 指针，指向当前所在分支")]),t._v(" "),s("li",[t._v("分支名称 指针，指向的是最新的commit")]),t._v(" "),s("li",[t._v("checkout testing 就是把HEAD指向testing分支")]),t._v(" "),s("li",[t._v("当提交新的commit时，分支指针会自动指向最新的提交")])]),t._v(" "),s("blockquote",[s("p",[t._v("所以创建分支，就是创建一个分支指针，指向当前分支最新的commit")])]),t._v(" "),s("h2",{attrs:{id:"git-merge和rebase"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-merge和rebase"}},[t._v("#")]),t._v(" git merge和rebase")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.jianshu.com/p/fbf46dd9e71d",target:"_blank",rel:"noopener noreferrer"}},[t._v("merge 和 rebase"),s("OutboundLink")],1)])]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v(" // 如果您的本地分支名为master，远程分支名为origin/master，则可以使用以下命令将它们合并：\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge origin/master\n// 如果您的本地分支名为master，远程分支名为origin/master，则可以使用以下命令将本地分支推送到远程分支\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin master\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h2",{attrs:{id:"git-pull-和-fetch-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-pull-和-fetch-的区别"}},[t._v("#")]),t._v(" git pull 和 fetch 的区别")]),t._v(" "),s("blockquote",[s("p",[t._v("git pull 命令相当于执行 git fetch 和 git merge 命令的组合。它会从远程仓库获取最新的代码，然后将其合并到当前分支中。如果远程仓库和本地仓库中的代码有冲突，git pull 命令会尝试自动解决这些冲突。如果自动解决失败，你需要手动解决冲突后再提交合并。")])]),t._v(" "),s("ul",[s("li",[t._v("借助pull命令就可以将远程仓库中的代码更新到本地的仓库中了")]),t._v(" "),s("li",[t._v("pull和fetch的区别，pull实现了一个合并的功能，等于fetch+merge")])]),t._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch origin develop // 抓取远程develop分支\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin develop:master //这将下载develop分支的最新代码并将其合并到本地master分支中\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("ul",[s("li",[t._v("pull和clone的区别，pull实现了更新，而clone实现的是从无到有的建立")])]),t._v(" "),s("div",{staticClass:"language-txt line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-txt"}},[s("code",[t._v("`git fetch origin test` 命令的执行过程如下：\n\n1. 首先，Git 会查找远程仓库 `origin` 的地址，并尝试连接该仓库。\n2. 接着，Git 会检查本地仓库中是否已经存在一个名为 `test` 的分支。如果不存在，则 Git 会在本地创建一个新的分支，名称为 `origin/test`。\n3. 然后，Git 会从远程仓库 `origin` 中拉取 `test` 分支的最新代码，并将其存储在本地仓库的 `origin/test` 分支上。\n4. 如果本地仓库中已经存在名为 `origin/test` 的分支，则 Git 会将远程仓库的 `test` 分支与本地仓库的 `origin/test` 分支进行合并。\n\n在执行 `git fetch origin test` 命令后，你可以通过 `git log origin/test` 命令查看 `origin/test` 分支上的最新代码提交记录。\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("h2",{attrs:{id:"git-快照的理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-快照的理解"}},[t._v("#")]),t._v(" git 快照的理解")]),t._v(" "),s("blockquote",[s("p",[t._v("每次commit，都会生成变化了的文件的snapshot，在.git/object下，记录了变化的整个文件，所以在commit的时候比其它版本控制系统更快，并且由于git gc的存在，会把多余的bolb变成类似其它SVC的记录本法，记录文件的差异。这也是git更快的优势之一")])]),t._v(" "),s("ul",[s("li",[t._v("https://www.zhihu.com/question/27680108/answer/536099893")])]),t._v(" "),s("h2",{attrs:{id:"git内部原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git内部原理"}},[t._v("#")]),t._v(" git内部原理")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-Git-%E5%AF%B9%E8%B1%A1",target:"_blank",rel:"noopener noreferrer"}},[t._v("内部原理"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"查看分支创建者-创建时间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看分支创建者-创建时间"}},[t._v("#")]),t._v(" 查看分支创建者，创建时间")]),t._v(" "),s("ul",[s("li",[t._v("git reflog show date=iso branchname")])]),t._v(" "),s("h2",{attrs:{id:"git-refs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-refs"}},[t._v("#")]),t._v(" git refs")]),t._v(" "),s("blockquote",[s("p",[t._v("引用是一种对于提交的间接引用方式。你可以认为这是一种用户友好的哈希串别名。这其实也是Git表示分支和tag的内部机制。\n引用的描述会以普通文件的形式存储在.git/refs目录下。为了更加详细的了解引用描述，可以进入.git/refs目录。你大概会看到一个类似下面结构的文件夹结构，当然由于你项目的仓库、分支、tag以及远程仓库不同，具体输出也会与下面不一样。")])]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/521722781",target:"_blank",rel:"noopener noreferrer"}},[t._v("refs"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"使用技巧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用技巧"}},[t._v("#")]),t._v(" 使用技巧")]),t._v(" "),s("h3",{attrs:{id:"查找某个文件修改历史"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查找某个文件修改历史"}},[t._v("#")]),t._v(" 查找某个文件修改历史")]),t._v(" "),s("ol",[s("li",[t._v("打开VSCode的那个文件")]),t._v(" "),s("li",[t._v("移到File History，就可以看到修改的所有提交")])]),t._v(" "),s("h3",{attrs:{id:"查找某个文件某行的修改历史"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查找某个文件某行的修改历史"}},[t._v("#")]),t._v(" 查找某个文件某行的修改历史")]),t._v(" "),s("ol",[s("li",[t._v("移到那一行，到VScode底部可以找到对应修改人和修改的commitId")]),t._v(" "),s("li",[t._v("根据commitId，可以到sourceTree中，使用跳转到，跳转过去看")]),t._v(" "),s("li",[t._v("也可以直接点眼睛图标或者放大镜，直接观看修改详情")]),t._v(" "),s("li",[t._v("也可以根据时间，到File History看修改记录")])]),t._v(" "),s("h3",{attrs:{id:"比较file-history中的两次修改的文件区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#比较file-history中的两次修改的文件区别"}},[t._v("#")]),t._v(" 比较File History中的两次修改的文件区别")]),t._v(" "),s("ol",[s("li",[t._v("左键选择一次提交")]),t._v(" "),s("li",[t._v("按住ctrl，在鼠标左键一次提交")]),t._v(" "),s("li",[t._v("选择弹窗的open Change")])])])}),[],!1,null,null,null);s.default=i.exports}}]);